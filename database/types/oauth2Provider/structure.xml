<structure collectionName="oauth2Providers" name="oauth2Provider">
    <field name="id" pattern="[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}|[0-9a-fA-F]{32}" primaryKey="true" type="java.util.UUID"/>
    <field comment="A human readable name for this provider" name="name" type="java.lang.String"/>
    <field comment="The application this provider is active on (if any). Some providers are used for client credential flows only and don't need user roundtripping." minOccurs="0" name="webApplicationId" type="java.lang.String"/>
    <field comment="By default we will take the host provided by the web application. But you can register a custom host for redirect uri generation." minOccurs="0" name="host" type="java.lang.String"/>
    <field comment="We assume you are capturing the response of the OAuth2 provider in your own application. This is the path to the correct file (defaults to &quot;/&quot;)" minOccurs="0" name="processPath" type="java.lang.String"/>
    <field comment="Once a user requests a login, how long is that particular request valid?" minOccurs="0" name="maximumLoginWait" type="be.nabu.libs.types.base.Duration"/>
    <field comment="You may need to use a custom http client to get this to work" minOccurs="0" name="httpClientId" type="java.lang.String"/>
    <field comment="A space separated list of scopes you want to request" minOccurs="0" name="requestedScopes" type="java.lang.String"/>
    <field comment="A space separated list of scopes that exist" minOccurs="0" name="availableScopes" type="java.lang.String"/>
    <field minOccurs="0" name="clientId" type="java.lang.String"/>
    <field minOccurs="0" name="clientSecret" type="java.lang.String"/>
    <field comment="The endpoint where we can resolve the token." minOccurs="0" name="tokenEndpoint" type="java.net.URI"/>
    <field comment="The endpoint where the user is redirected to to log in" minOccurs="0" name="authorizationEndpoint" type="java.net.URI"/>
    <field comment="Might be specific to a resource" minOccurs="0" name="resource" type="java.lang.String"/>
    <field comment="Defaults to POST. But some, like facebook, use a GET. This field is case insenstive" minOccurs="0" name="tokenMethod" type="java.lang.String"/>
    <field comment="The service that can be used to resolve the user info" minOccurs="0" name="userInfoServiceId" type="java.lang.String"/>
    <field comment="The service that can be used to get the token" minOccurs="0" name="tokenServiceId" type="java.lang.String"/>
    <field comment="The service that can be used to get the redirect uri" minOccurs="0" name="redirectUriServiceId" type="java.lang.String"/>
    <field comment="A custom service to resolve token information" minOccurs="0" name="tokenInfoServiceId" type="java.lang.String"/>
    <field comment="A service to handle authentication (must implement: nabu.cms.oauth2.client.specs.handleAuthentication)" minOccurs="0" name="handleAuthenticationServiceId" type="java.lang.String"/>
    <field comment="force,auto" minOccurs="0" name="approvalPrompt" type="java.lang.String"/>
    <field comment="online,offline" minOccurs="0" name="accessType" type="java.lang.String"/>
    <field comment="When creating new accounts, the default alias type to (attempt to) use: email, phone, id (default is email)" minOccurs="0" name="aliasType" type="java.lang.String"/>
    <field comment="When used as web application login, do you want to force the token lifecycle on the remember etc?" minOccurs="0" name="forceLifecycle" type="java.lang.Boolean"/>
    <field comment="When no verification status is given, do we verify the accounts by default?" minOccurs="0" name="defaultVerified" type="java.lang.Boolean"/>
    <field comment="For some providers (e.g. microsoft), when used in federation you can give a domain hint in the redirect uri" minOccurs="0" name="domainHint" type="java.lang.String"/>
    <field comment="The JWT MUST contain an &quot;iss&quot; (issuer) claim that contains a&#10;        unique identifier for the entity that issued the JWT.  In the&#10;        absence of an application profile specifying otherwise,&#10;        compliant applications MUST compare issuer values using the&#10;        Simple String Comparison method defined in Section 6.2.1 of RFC&#10;        3986 [RFC3986]." minOccurs="0" name="jwtIssuer" type="java.lang.String"/>
    <field comment=" The JWT MUST contain a &quot;sub&quot; (subject) claim identifying the&#10;        principal that is the subject of the JWT.  Two cases need to be&#10;        differentiated:&#10;&#10;        A.  For the authorization grant, the subject typically&#10;            identifies an authorized accessor for which the access token&#10;            is being requested (i.e., the resource owner or an&#10;            authorized delegate), but in some cases, may be a&#10;            pseudonymous identifier or other value denoting an anonymous&#10;            user.&#10;&#10;        B.  For client authentication, the subject MUST be the&#10;            &quot;client_id&quot; of the OAuth client." minOccurs="0" name="jwtSubject" type="java.lang.String"/>
    <field comment="The JWT MUST contain an &quot;aud&quot; (audience) claim containing a&#10;        value that identifies the authorization server as an intended&#10;        audience.  The token endpoint URL of the authorization server&#10;        MAY be used as a value for an &quot;aud&quot; element to identify the&#10;        authorization server as an intended audience of the JWT.  The&#10;        authorization server MUST reject any JWT that does not contain&#10;        its own identity as the intended audience.  In the absence of an&#10;        application profile specifying otherwise, compliant applications&#10;        MUST compare the audience values using the Simple String&#10;        Comparison method defined in SectionÂ 6.2.1 of RFC 3986&#10;        [RFC3986].  As noted in Section 5, the precise strings to be&#10;        used as the audience for a given authorization server must be&#10;        configured out of band by the authorization server and the&#10;        issuer of the JWT." minOccurs="0" name="jwtAudience" type="java.lang.String"/>
    <field comment="An encoded version of the key to be used to sign the jwt tokens" minOccurs="0" name="jwtKey" type="java.lang.String"/>
</structure>
